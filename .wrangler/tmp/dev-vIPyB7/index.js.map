{
  "version": 3,
  "sources": ["../bundle-kFIJB6/checked-fetch.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../../../node_modules/@tsndr/cloudflare-worker-jwt/index.js", "../../../src/budi.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-kFIJB6/middleware-insertion-facade.js", "../bundle-kFIJB6/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/erwinkodiat/git/kodiat-worker/.wrangler/tmp/dev-vIPyB7",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t  );\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "if (typeof crypto === 'undefined' || !crypto.subtle)\n    throw new Error('SubtleCrypto not supported!');\nconst algorithms = {\n    ES256: { name: 'ECDSA', namedCurve: 'P-256', hash: { name: 'SHA-256' } },\n    ES384: { name: 'ECDSA', namedCurve: 'P-384', hash: { name: 'SHA-384' } },\n    ES512: { name: 'ECDSA', namedCurve: 'P-521', hash: { name: 'SHA-512' } },\n    HS256: { name: 'HMAC', hash: { name: 'SHA-256' } },\n    HS384: { name: 'HMAC', hash: { name: 'SHA-384' } },\n    HS512: { name: 'HMAC', hash: { name: 'SHA-512' } },\n    RS256: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-256' } },\n    RS384: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-384' } },\n    RS512: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-512' } }\n};\nfunction bytesToByteString(bytes) {\n    let byteStr = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n        byteStr += String.fromCharCode(bytes[i]);\n    }\n    return byteStr;\n}\nfunction byteStringToBytes(byteStr) {\n    let bytes = new Uint8Array(byteStr.length);\n    for (let i = 0; i < byteStr.length; i++) {\n        bytes[i] = byteStr.charCodeAt(i);\n    }\n    return bytes;\n}\nfunction arrayBufferToBase64String(arrayBuffer) {\n    return btoa(bytesToByteString(new Uint8Array(arrayBuffer)));\n}\nfunction base64StringToArrayBuffer(b64str) {\n    return byteStringToBytes(atob(b64str)).buffer;\n}\nfunction textToArrayBuffer(str) {\n    return byteStringToBytes(decodeURI(encodeURIComponent(str)));\n}\n// @ts-ignore\nfunction arrayBufferToText(arrayBuffer) {\n    return bytesToByteString(new Uint8Array(arrayBuffer));\n}\nfunction arrayBufferToBase64Url(arrayBuffer) {\n    return arrayBufferToBase64String(arrayBuffer).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\nfunction base64UrlToArrayBuffer(b64url) {\n    return base64StringToArrayBuffer(b64url.replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, ''));\n}\nfunction textToBase64Url(str) {\n    return btoa(str).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\nfunction pemToBinary(pem) {\n    return base64StringToArrayBuffer(pem.replace(/-+(BEGIN|END).*/g, '').replace(/\\s/g, ''));\n}\nasync function importTextSecret(key, algorithm) {\n    return await crypto.subtle.importKey(\"raw\", textToArrayBuffer(key), algorithm, true, [\"verify\", \"sign\"]);\n}\nasync function importJwk(key, algorithm) {\n    return await crypto.subtle.importKey(\"jwk\", key, algorithm, true, [\"verify\", \"sign\"]);\n}\nasync function importPublicKey(key, algorithm) {\n    return await crypto.subtle.importKey(\"spki\", pemToBinary(key), algorithm, true, [\"verify\"]);\n}\nasync function importPrivateKey(key, algorithm) {\n    return await crypto.subtle.importKey(\"pkcs8\", pemToBinary(key), algorithm, true, [\"sign\"]);\n}\nasync function importKey(key, algorithm) {\n    if (typeof key === 'object')\n        return importJwk(key, algorithm);\n    if (typeof key !== 'string')\n        throw new Error('Unsupported key type!');\n    if (key.includes('PUBLIC'))\n        return importPublicKey(key, algorithm);\n    if (key.includes('PRIVATE'))\n        return importPrivateKey(key, algorithm);\n    return importTextSecret(key, algorithm);\n}\nfunction decodePayload(raw) {\n    try {\n        return JSON.parse(atob(raw));\n    }\n    catch {\n        return;\n    }\n}\n/**\n * Signs a payload and returns the token\n *\n * @param {JwtPayload} payload The payload object. To use `nbf` (Not Before) and/or `exp` (Expiration Time) add `nbf` and/or `exp` to the payload.\n * @param {string | JsonWebKey} secret A string which is used to sign the payload.\n * @param {JwtSignOptions | JwtAlgorithm | string} [options={ algorithm: 'HS256', header: { typ: 'JWT' } }] The options object or the algorithm.\n * @throws {Error} If there's a validation issue.\n * @returns {Promise<string>} Returns token as a `string`.\n */\nexport async function sign(payload, secret, options = 'HS256') {\n    if (typeof options === 'string')\n        options = { algorithm: options };\n    options = { algorithm: 'HS256', header: { typ: 'JWT' }, ...options };\n    if (!payload || typeof payload !== 'object')\n        throw new Error('payload must be an object');\n    if (!secret || (typeof secret !== 'string' && typeof secret !== 'object'))\n        throw new Error('secret must be a string or a JWK object');\n    if (typeof options.algorithm !== 'string')\n        throw new Error('options.algorithm must be a string');\n    const algorithm = algorithms[options.algorithm];\n    if (!algorithm)\n        throw new Error('algorithm not found');\n    if (!payload.iat)\n        payload.iat = Math.floor(Date.now() / 1000);\n    const partialToken = `${textToBase64Url(JSON.stringify({ ...options.header, alg: options.algorithm }))}.${textToBase64Url(JSON.stringify(payload))}`;\n    const key = await importKey(secret, algorithm);\n    const signature = await crypto.subtle.sign(algorithm, key, textToArrayBuffer(partialToken));\n    return `${partialToken}.${arrayBufferToBase64Url(signature)}`;\n}\n/**\n * Verifies the integrity of the token and returns a boolean value.\n *\n * @param {string} token The token string generated by `jwt.sign()`.\n * @param {string | JsonWebKey} secret The string which was used to sign the payload.\n * @param {JWTVerifyOptions | JWTAlgorithm} options The options object or the algorithm.\n * @throws {Error | string} Throws an error `string` if the token is invalid or an `Error-Object` if there's a validation issue.\n * @returns {Promise<boolean>} Returns `true` if signature, `nbf` (if set) and `exp` (if set) are valid, otherwise returns `false`.\n */\nexport async function verify(token, secret, options = { algorithm: 'HS256', throwError: false }) {\n    if (typeof options === 'string')\n        options = { algorithm: options, throwError: false };\n    options = { algorithm: 'HS256', throwError: false, ...options };\n    if (typeof token !== 'string')\n        throw new Error('token must be a string');\n    if (typeof secret !== 'string' && typeof secret !== 'object')\n        throw new Error('secret must be a string or a JWK object');\n    if (typeof options.algorithm !== 'string')\n        throw new Error('options.algorithm must be a string');\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3)\n        throw new Error('token must consist of 3 parts');\n    const algorithm = algorithms[options.algorithm];\n    if (!algorithm)\n        throw new Error('algorithm not found');\n    const { payload } = decode(token);\n    try {\n        if (!payload)\n            throw new Error('PARSE_ERROR');\n        if (payload.nbf && payload.nbf > Math.floor(Date.now() / 1000))\n            throw new Error('NOT_YET_VALID');\n        if (payload.exp && payload.exp <= Math.floor(Date.now() / 1000))\n            throw new Error('EXPIRED');\n        const key = await importKey(secret, algorithm);\n        return await crypto.subtle.verify(algorithm, key, base64UrlToArrayBuffer(tokenParts[2]), textToArrayBuffer(`${tokenParts[0]}.${tokenParts[1]}`));\n    }\n    catch (err) {\n        if (options.throwError)\n            throw err;\n        return false;\n    }\n}\n/**\n * Returns the payload **without** verifying the integrity of the token. Please use `jwt.verify()` first to keep your application secure!\n *\n * @param {string} token The token string generated by `jwt.sign()`.\n * @returns {JwtData} Returns an `object` containing `header` and `payload`.\n */\nexport function decode(token) {\n    return {\n        header: decodePayload(token.split('.')[0].replace(/-/g, '+').replace(/_/g, '/')),\n        payload: decodePayload(token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/'))\n    };\n}\nexport default {\n    sign,\n    verify,\n    decode\n};\n", "export default {\n\tname: \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImFmZjJlOWI5NWY1YmEwYjJlNjhlYzZmMGY0ZDllMzJmMjE2YjU4MWMzMzAyNjNlYWE3NjM2ODg4YmFjNGQxZmYifQ.eyJhdWQiOlsiMTg0NmZkNmU0NWMzMmVkNDQzMjI0NmYxZTRiMWMyNmM0M2U0ZDI1ZmI4YTIyMTU3MWNlMzBiNGVhOGJjNDQ1ZCJdLCJlbWFpbCI6ImVyd2luLmtvZGlhdEBnbWFpbC5jb20iLCJleHAiOjE3MDE2OTAyMzMsImlhdCI6MTcwMTYwMzgzMywibmJmIjoxNzAxNjAzODMzLCJpc3MiOiJodHRwczovL2tvZGlhdC5jbG91ZGZsYXJlYWNjZXNzLmNvbSIsInR5cGUiOiJhcHAiLCJpZGVudGl0eV9ub25jZSI6IlBhWUgyNkEwNE5GUUJCOUkiLCJzdWIiOiI5NDc5NmE5NS0zZGQzLTU0YTYtOTEzMC00OGIzZDBkYTMyY2MiLCJjb3VudHJ5IjoiSUQifQ.dw6vzA6OcFiSh6EqptvFyTsTEOG8SfheJkM_Ow7IHBvki6KoIgx9K5BVSBK1t7Ms7vTPX7s1WQuBrn7-6kS-0xIH5NAgjjOcxpV5OyDLG1CIThkoP9Yi5NqpKZ5FvyuL2AJ8wmZ2SgyuWs0lGfDV8ZjAslAtQC8J9cRF4nUlhaYdJwJoeErRMee3VGYe7mLgZgP34ec-IFzXDofZNskyWLHx4nTYAV94dl_3bOYQzvSt24FWYcrOqewls8T5MIusk9K330JHrX8XwXSSwt4VdnlVSHxx5PZLtmwRCtFNNsL-WPnNZInM_J8_HpKJp9ycbivCvhxaBsIyT-9oYCTs2Q\",\n};\n\n\n\n\n", "import jwt from '@tsndr/cloudflare-worker-jwt';\nimport userJwt1 from \"./budi.js\";\n\nexport default {\n\tasync fetch(request, env, ctx) {\n\n\t\t//let userJwt = request.headers.get(\"Cf-Access-Jwt-Assertion\");\n\t\t//console.log(userJwt.name);\n\t\tlet userJwt = userJwt1.name;\n\n\t\tconst { payload } = jwt.decode(userJwt);\n\t\tconst dateTimestamp  = (new Date(payload.iat * 1000)).toISOString();\n\t\tconst url = \"https://restcountries.com/v3.1/alpha/\" + payload.country;\n\t\tconsole.log('14');\n    const response = await fetch(url, {\n\t\t\theaders: {\n        \"content-type\": \"application/json;charset=UTF-8\",\n      },\n\t\t});\n\t\tconsole.log('20');\n\t\tconst namanya = await response.json();\n\t\tconst countryName = namanya[0].name.common;\n\t\tconsole.log(\"countryName: \" + countryName);\n\t\tconst strCountry = \"<a href=\\\"/secure/\" + payload.country + \"\\\" class=\\\"text-blue-400 hover:underline\\\">\"+ countryName +\"</a>\";\n\n\t\tvar html = \"<!DOCTYPE html>\";\n\t\thtml += \"<head>\";\n\t\thtml += \"<script src=\\\"https://cdn.tailwindcss.com\\\"></script>\";\n\t\thtml += \"</head>\";\n\t\thtml += \"<body>\";\n\t\thtml += \"<div class=\\\"h-screen flex items-center justify-center text-3xl text-gray-500\\\">\";\n\t\thtml += `<p><span class=\\\"font-bold\\\">${payload.email}</span> authenticated at <span class=\\\"font-bold\\\">${dateTimestamp}</span> from <span class=\\\"font-bold\\\">${strCountry}</span>`;\n\t\thtml += \"<br /><br />Go back <a href=\\\"/\\\" class=\\\"text-blue-400 hover:underline\\\">home</a>\";\n\t\thtml += \"</p></div>\";\n\t\thtml += \"</body>\";\n\n\t\treturn new Response(html, {\n      headers: {\n        \"content-type\": \"text/html;charset=UTF-8\"\n\t\t\t}\n\t\t})\n\t},\n};\n\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\nexport const wrap = undefined;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/erwinkodiat/git/kodiat-worker/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/erwinkodiat/git/kodiat-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\t\t\t\tconst envWrappers = [__MIDDLEWARE_0__.wrap].filter(Boolean);\n\t\t\t\tconst facade = {\n\t\t\t\t\t...worker,\n\t\t\t\t\tenvWrappers,\n\t\t\t\t\tmiddleware: [\n\t\t\t\t\t\t__MIDDLEWARE_0__.default,\n            ...(worker.middleware ? worker.middleware : []),\n\t\t\t\t\t].filter(Boolean)\n\t\t\t\t}\n\t\t\t\texport * from \"/Users/erwinkodiat/git/kodiat-worker/src/index.js\";\n\n\t\t\t\tconst maskDurableObjectDefinition = (cls) =>\n\t\t\t\t\tclass extends cls {\n\t\t\t\t\t\tconstructor(state, env) {\n\t\t\t\t\t\t\tlet wrappedEnv = env\n\t\t\t\t\t\t\tfor (const wrapFn of envWrappers) {\n\t\t\t\t\t\t\t\twrappedEnv = wrapFn(wrappedEnv)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsuper(state, wrappedEnv);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\n\n\t\t\t\texport default facade;", "// // This loads all middlewares exposed on the middleware object\n// // and then starts the invocation chain.\n// // The big idea is that we can add these to the middleware export dynamically\n// // through wrangler, or we can potentially let users directly add them as a sort\n// // of \"plugin\" system.\n\nimport {\n\tDispatcher,\n\tMiddleware,\n\t__facade_invoke__,\n\t__facade_register__,\n} from \"/Users/erwinkodiat/git/kodiat-worker/node_modules/wrangler/templates/middleware/common.ts\";\n\nimport worker from \"/Users/erwinkodiat/git/kodiat-worker/.wrangler/tmp/bundle-kFIJB6/middleware-insertion-facade.js\";\n\n// We need to preserve all of the exports from the worker\nexport * from \"/Users/erwinkodiat/git/kodiat-worker/.wrangler/tmp/bundle-kFIJB6/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\t#noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nconst __facade_modules_fetch__: ExportedHandlerFetchHandler = function (\n\trequest,\n\tenv,\n\tctx\n) {\n\tif (worker.fetch === undefined)\n\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\treturn worker.fetch(request, env, ctx);\n};\n\nfunction getMaskedEnv(rawEnv: unknown) {\n\tlet env = rawEnv as Record<string, unknown>;\n\tif (worker.envWrappers && worker.envWrappers.length > 0) {\n\t\tfor (const wrapFn of worker.envWrappers) {\n\t\t\tenv = wrapFn(env);\n\t\t}\n\t}\n\treturn env;\n}\n\n/**\n * This type is here to cause a type error if a new export handler is added to\n * `ExportHandler` without it being included in the `facade` below.\n */\ntype MissingExportHandlers = Omit<\n\tRequired<ExportedHandler>,\n\t\"tail\" | \"trace\" | \"scheduled\" | \"queue\" | \"test\" | \"email\" | \"fetch\"\n>;\n\nlet registeredMiddleware = false;\n\nconst facade: ExportedHandler<unknown> & MissingExportHandlers = {\n\t...(worker.tail && {\n\t\ttail: maskHandlerEnv(worker.tail),\n\t}),\n\t...(worker.trace && {\n\t\ttrace: maskHandlerEnv(worker.trace),\n\t}),\n\t...(worker.scheduled && {\n\t\tscheduled: maskHandlerEnv(worker.scheduled),\n\t}),\n\t...(worker.queue && {\n\t\tqueue: maskHandlerEnv(worker.queue),\n\t}),\n\t...(worker.test && {\n\t\ttest: maskHandlerEnv(worker.test),\n\t}),\n\t...(worker.email && {\n\t\temail: maskHandlerEnv(worker.email),\n\t}),\n\n\tfetch(request, rawEnv, ctx) {\n\t\tconst env = getMaskedEnv(rawEnv);\n\t\t// Get the chain of middleware from the worker object\n\t\tif (worker.middleware && worker.middleware.length > 0) {\n\t\t\t// Make sure we only register middleware once:\n\t\t\t// https://github.com/cloudflare/workers-sdk/issues/2386#issuecomment-1614715911\n\t\t\tif (!registeredMiddleware) {\n\t\t\t\tregisteredMiddleware = true;\n\t\t\t\tfor (const middleware of worker.middleware) {\n\t\t\t\t\t__facade_register__(middleware);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst __facade_modules_dispatch__: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tenv,\n\t\t\t\tctx,\n\t\t\t\t__facade_modules_dispatch__,\n\t\t\t\t__facade_modules_fetch__\n\t\t\t);\n\t\t} else {\n\t\t\t// We didn't have any middleware so we can skip the invocation chain,\n\t\t\t// and just call the fetch handler directly\n\n\t\t\t// We \"don't care\" if this is undefined as we want to have the same behavior\n\t\t\t// as if the worker completely bypassed middleware.\n\t\t\treturn __facade_modules_fetch__(request, env, ctx);\n\t\t}\n\t},\n};\n\ntype HandlerFn<D, R> = (data: D, env: unknown, ctx: ExecutionContext) => R;\nfunction maskHandlerEnv<D, R>(handler: HandlerFn<D, R>): HandlerFn<D, R> {\n\treturn (data, env, ctx) => handler(data, getMaskedEnv(env), ctx);\n}\n\nexport default facade;\n"],
  "mappings": "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",
  "names": ["facade"]
}
